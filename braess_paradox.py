# -*- coding: utf-8 -*-
"""Braess_Paradox.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rbWb1MnpnUbEFUmwqreJiYaIvFg5Zg0R
"""

import random

def entradas_usuario():
  n = int(input("Quantidade de pessoas: "))
  atalho = input("Caminho com atalho?[s/n]").lower()
  p = float(input("Probabilidade associada à escolha do caminho(valores de 0 à 100): "))
  return n, atalho, p

def primeira_iteracao(n, atalho, p):

  
  # 0 -> caminho de cima
  # 1 -> caminho de baixo
  # 2 -> atalho

  if atalho == "n":
    quant_cima = 0 # quantidade de pessoas pelo caminho de cima
    quant_baixo = 0 # quantidade de pessoas pelo caminho de baixo
    for i in range(n):
      caminho = random.randint(0,1) # escolhe aleatoriamente entre 0 e 1
      if caminho == 0:
        quant_cima += 1
      else:
        quant_baixo += 1
    return quant_cima, quant_baixo,"n"

  else:

    quant_cima = 0 # quantidade de pessoas pelo caminho de cima
    quant_baixo = 0 # quantidade de pessoas pelo caminho de baixo
    quant_atalho = 0 # quantidade de pessoas pelo atalho
    for i in range(n):
      caminho = random.randint(0,2) # escolhe aleatoriamente valores entre 0 e 2
      if caminho == 0:
        quant_cima += 1
      elif caminho == 1:
        quant_baixo += 1
      else:
        quant_atalho += 1
    return quant_cima, quant_baixo, quant_atalho

def calcula_tempo(quant_cima, quant_baixo, atalho):

  if atalho == "n":
    # tempo para o caminho de cima
    tempo_cima = (quant_cima/100) + 45
    # tempo para o caminho de baixo
    tempo_baixo = (quant_baixo/100) + 45
    return [tempo_cima, tempo_baixo]

  else:
    # tempo para o caminho de cima
    tempo_cima = (quant_cima/100) + 45
    # tempo para o caminho de baixo
    tempo_baixo = (quant_baixo/100) + 45
    # tempo para o atalho
    tempo_atalho = ((atalho + quant_cima)/100) + ((atalho + quant_baixo)/100)
    return [tempo_cima, tempo_baixo, tempo_atalho]

def simulacao(n, atalho, p,caminho_rapido):

  


  # ------ caminho sem atalho ------
  if atalho == "n":

    alternativas = random.randint(0,1) # sorteia aleatoriamente valores entre 0(cima) e 1(baixo)


    quant_cima = 0 # quantidade de carros que vao exclusivamente por cima
    quant_baixo = 0 # quantidade de carros que vao exclusivamente por baixo

  


    while quant_cima + quant_baixo < n:
      if caminho_rapido == 0:

        # seleciona aleatoriamente um valor da lista de caminhos com as probabilidades associadas a esse valor
        list_caminhos = [0,alternativas]
        randomList = random.choices(list_caminhos, weights=[p, 100-p], k=1) 

        if randomList[0] == 0:
          quant_cima += 1
        else:
          quant_baixo += 1
      
      else:

        list_caminhos = [alternativas,1]
        randomList = random.choices(list_caminhos, weights=[100-p, p], k=1)

        if randomList[0] == 0:
          quant_cima += 1
        else:
          quant_baixo += 1


    # recalcula o tempo com as novas quantidades de carros por percurso
    list_tempo = calcula_tempo(quant_cima, quant_baixo,atalho)
    

    media_cima = list_tempo[0]
    media_baixo = list_tempo[-1]


    return media_cima,quant_cima,media_baixo, quant_baixo, False, False


  # ------ Caso exista o caminho com atalho ------
  else:

    # sorteia aleatoriamente valores entre 0(cima), 1(baixo) e 2(atalho)
    alternativas = random.randint(0,2)


    quant_cima = 0
    quant_baixo = 0
    quant_atalho = 0 # quantidade de carros que vao pelo atalho

    while quant_atalho + quant_cima + quant_baixo < n:

      # caso o caminho mais rápido seja por cima
      if caminho_rapido == 0:
        list_caminhos = [0,alternativas]
        randomList = random.choices(
          list_caminhos, weights=[p, 100-p], k=1)
        if randomList[0] == 0:
          quant_cima += 1
          
        
        elif randomList[0] == 2:
          quant_atalho += 1
          
        
        else:
          quant_baixo += 1
          
      # caso o caminho mais rápido seja pelo atalho
      elif caminho_rapido == 2:

        list_caminhos = [2,alternativas]
        randomList = random.choices(list_caminhos, weights=[p, 100-p], k=1)

        if randomList[0] == 0:
          quant_cima += 1
          
        
        elif randomList[0] == 2:
          quant_atalho += 1
          
        
        else:
          quant_baixo += 1
          

      # caso o caminho mais rápido seja por baixo
      else:
        list_caminhos = [alternativas,1]
        randomList = random.choices(list_caminhos, weights=[100-p, p], k=1)
        

        if randomList[0] == 0:
          quant_cima += 1
          
        
        elif randomList[0] == 2:
          quant_atalho += 1         

        else:
          quant_baixo += 1
          
    
    list_tempo = calcula_tempo(quant_cima, quant_baixo,quant_atalho)
    

    media_cima = list_tempo[0]
    media_atalho = list_tempo[2]
    media_baixo = list_tempo[1]

    return media_cima,quant_cima,media_baixo, quant_baixo, media_atalho, quant_atalho

def equilibrio_sem_atalho(temp_time,temp_quant,list_tempos,list_quantidades):

    tempos_cima = len(set([temp_time[0],list_tempos[0]]))
    tempos_baixo = len(set([temp_time[1],list_tempos[1]]))
    quant_cima = len(set([temp_quant[0],list_quantidades[0]]))
    quant_baixo = len(set([temp_quant[1],list_quantidades[1]]))

    if tempos_cima == 1 and tempos_baixo == 1 and quant_cima == 1 and quant_baixo == 1:
      return True
    else:
      return False

def equilibrio_com_atalho(temp_time,temp_quant,list_tempos,list_quantidades):

    tempos_cima = len(set([temp_time[0],list_tempos[0]]))
    tempos_baixo = len(set([temp_time[1],list_tempos[1]]))
    tempos_atalho = len(set([temp_time[2],list_tempos[2]]))
    quant_cima = len(set([temp_quant[0],list_quantidades[0]]))
    quant_baixo = len(set([temp_quant[1],list_quantidades[1]]))
    quant_atalho = len(set([temp_quant[2],list_quantidades[2]]))

    if tempos_cima == 1 and tempos_baixo == 1 and tempos_atalho == 1 and quant_cima == 1 and quant_baixo == 1 and quant_atalho == 1:
      return True
    else:
      return False

def main():
  n, atalho, p = entradas_usuario()
  

  # caso nao tenha atalho
  if atalho == "n":

    # variáveis temporárias para verificar o equilíbrio
    temp_time = [0,0]
    temp_quant = [0,0]


    iteracoes = 0

    while iteracoes < 1000:

      if iteracoes == 0:

        # realiza a primeira simulação
        quant_cima, quant_baixo,atalho = primeira_iteracao(n, atalho, p)

        # calcula o tempo dos percursos da primeira simulação
        list_tempo = calcula_tempo(quant_cima, quant_baixo,atalho)

        # encontra o caminho mais rápido da primeira simulação 
        caminho_rapido = list_tempo.index(min(list_tempo))



        print("--------simulação "+ str(iteracoes) +"--------")
        print("tempo de cima: ",round(list_tempo[0],2))
        print("quantidade de cima: ",quant_cima)
        print("tempo de baixo: ",round(list_tempo[1],2))
        print("quantidade de baixo: ",quant_baixo)
        print("\n")
        

        iteracoes += 1

      else:

        if iteracoes == 1:

          media_cima,quant_cima,media_baixo, quant_baixo,media_atalho, quant_atalho = simulacao(n, atalho, p, caminho_rapido)

          temp_time =[media_cima,media_baixo]
          temp_quant = [quant_cima,quant_baixo]

          print("--------simulação "+ str(iteracoes) +"--------")
          print("tempo de cima: ",round(media_cima,2))
          print("quantidade de cima: ",quant_cima)
          print("tempo de baixo: ",round(media_baixo,2))
          print("quantidade de baixo: ",quant_baixo)
          print("\n")


        else:

          media_cima,quant_cima,media_baixo, quant_baixo,media_atalho, quant_atalho = simulacao(n, atalho, p, caminho_rapido)
          
          # variáveis para comparar com as temporárias
          tempos = [media_cima,media_baixo]
          quantidades = [quant_cima,quant_baixo]

          equi = equilibrio_sem_atalho(temp_time,temp_quant,tempos,quantidades)

          if equi == True:

            print("--------simulação "+ str(iteracoes) +"--------")
            print("tempo de cima: ",round(media_cima,2))
            print("quantidade de cima: ",quant_cima)
            print("tempo de baixo: ",round(media_baixo,2))
            print("quantidade de baixo: ",quant_baixo)
            print("\n")
            print("Equilíbrio atingido!")
            break

          else:

            print("--------simulação "+ str(iteracoes) +"--------")
            print("tempo de cima: ",round(media_cima,2))
            print("quantidade de cima: ",quant_cima)
            print("tempo de baixo: ",round(media_baixo,2))
            print("quantidade de baixo: ",quant_baixo)
            print("\n")

            temp_time =[media_cima,media_baixo]
            temp_quant = [quant_cima,quant_baixo]


        iteracoes += 1



  # ------------- caso tenha atalho --------------
  else:

    # variáveis temporárias para verificar o equilíbrio
    temp_time = [0,0,0]
    temp_quant = [0,0,0]

    iteracoes = 0

    while iteracoes < 1000:

      if iteracoes == 0:

        quant_cima, quant_baixo,atalho = primeira_iteracao(n, atalho, p)


        list_tempo = calcula_tempo(quant_cima, quant_baixo,atalho)


        caminho_rapido = list_tempo.index(min(list_tempo))

        print("--------simulação "+ str(iteracoes) +"--------")
        print("tempo de cima: ",round(list_tempo[0],2))
        print("quantidade de cima: ",quant_cima)
        print("tempo de baixo: ",round(list_tempo[1],2))
        print("quantidade de baixo: ",quant_baixo)
        print("tempo do atalho: ",round(list_tempo[2],2))
        print("quantidade no atalho: ",atalho)
        print("\n")
        


        iteracoes += 1

      else:

        if iteracoes == 1:

          media_cima,quant_cima,media_baixo, quant_baixo,media_atalho, quant_atalho = simulacao(n, atalho, p, caminho_rapido)

          temp_time =[media_cima,media_baixo,media_atalho]
          temp_quant = [quant_cima,quant_baixo,quant_atalho]

          print("--------simulação "+ str(iteracoes) +"--------")
          print("tempo de cima: ",round(media_cima,2))
          print("quantidade de cima: ",quant_cima)
          print("tempo de baixo: ",round(media_baixo,2))
          print("quantidade de baixo: ",quant_baixo)
          print("tempo do atalho: ",round(media_atalho,2))
          print("quantidade do atalho: ",quant_atalho)
          print("\n")

        else:

          media_cima,quant_cima,media_baixo, quant_baixo,media_atalho, quant_atalho = simulacao(n, atalho, p, caminho_rapido)
          
          # variáveis para comparar com as temporárias
          tempos = [media_cima,media_baixo,media_atalho]
          quantidades = [quant_cima,quant_baixo,quant_atalho]

          equi = equilibrio_com_atalho(temp_time,temp_quant,tempos,quantidades)

          if equi == True:

            print("--------simulação "+ str(iteracoes) +"--------")
            print("tempo de cima: ",round(media_cima,2))
            print("quantidade de cima: ",quant_cima)
            print("tempo de baixo: ",round(media_baixo,2))
            print("quantidade de baixo: ",quant_baixo)
            print("tempo do atalho: ",round(media_atalho,2))
            print("quantidade do atalho: ",quant_atalho)
            print("\n")
            print("Equilíbrio atingido!")
            break

          else:

            print("--------simulação "+ str(iteracoes) +"--------")
            print("tempo de cima: ",round(media_cima,2))
            print("quantidade de cima: ",quant_cima)
            print("tempo de baixo: ",round(media_baixo,2))
            print("quantidade de baixo: ",quant_baixo)
            print("tempo do atalho: ",round(media_atalho,2))
            print("quantidade do atalho: ",quant_atalho)
            print("\n")

            temp_time =[media_cima,media_baixo,media_atalho]
            temp_quant = [quant_cima,quant_baixo,quant_atalho]

        

        iteracoes += 1

main()